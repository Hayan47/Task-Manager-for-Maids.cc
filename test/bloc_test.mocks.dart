// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager/test/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i15;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:task_manager/data/apis/auth_services.dart' as _i4;
import 'package:task_manager/data/apis/task_services.dart' as _i2;
import 'package:task_manager/data/database_helper.dart' as _i3;
import 'package:task_manager/data/models/auth_model.dart' as _i11;
import 'package:task_manager/data/models/task_model.dart' as _i9;
import 'package:task_manager/data/models/user_model.dart' as _i6;
import 'package:task_manager/data/repositories/auth_repository.dart' as _i10;
import 'package:task_manager/data/repositories/task_details_repository.dart'
    as _i12;
import 'package:task_manager/data/repositories/task_repository.dart' as _i7;
import 'package:task_manager/logic/internet_cubit/internet_cubit.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskServices_0 extends _i1.SmartFake implements _i2.TaskServices {
  _FakeTaskServices_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseHelper_1 extends _i1.SmartFake
    implements _i3.DatabaseHelper {
  _FakeDatabaseHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthServices_2 extends _i1.SmartFake implements _i4.AuthServices {
  _FakeAuthServices_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_3 extends _i1.SmartFake
    implements _i5.FlutterSecureStorage {
  _FakeFlutterSecureStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_4 extends _i1.SmartFake implements _i6.User {
  _FakeUser_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i7.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskServices get taskServices => (super.noSuchMethod(
        Invocation.getter(#taskServices),
        returnValue: _FakeTaskServices_0(
          this,
          Invocation.getter(#taskServices),
        ),
      ) as _i2.TaskServices);

  @override
  _i3.DatabaseHelper get databaseHelper => (super.noSuchMethod(
        Invocation.getter(#databaseHelper),
        returnValue: _FakeDatabaseHelper_1(
          this,
          Invocation.getter(#databaseHelper),
        ),
      ) as _i3.DatabaseHelper);

  @override
  _i8.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> isCacheValid(int? page) => (super.noSuchMethod(
        Invocation.method(
          #isCacheValid,
          [page],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int?> getTotalTasksNumber() => (super.noSuchMethod(
        Invocation.method(
          #getTotalTasksNumber,
          [],
        ),
        returnValue: _i8.Future<int?>.value(),
      ) as _i8.Future<int?>);

  @override
  _i8.Future<List<_i9.Task>> getTasksFromApi(int? skip) => (super.noSuchMethod(
        Invocation.method(
          #getTasksFromApi,
          [skip],
        ),
        returnValue: _i8.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i8.Future<List<_i9.Task>>);

  @override
  _i8.Future<List<_i9.Task>> getTasksFromCache(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksFromCache,
          [page],
        ),
        returnValue: _i8.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i8.Future<List<_i9.Task>>);

  @override
  _i8.Future<int> getTotalPages() => (super.noSuchMethod(
        Invocation.method(
          #getTotalPages,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> addTask(_i9.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTask(_i9.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i10.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthServices get authServices => (super.noSuchMethod(
        Invocation.getter(#authServices),
        returnValue: _FakeAuthServices_2(
          this,
          Invocation.getter(#authServices),
        ),
      ) as _i4.AuthServices);

  @override
  _i5.FlutterSecureStorage get flutterSecureStorage => (super.noSuchMethod(
        Invocation.getter(#flutterSecureStorage),
        returnValue: _FakeFlutterSecureStorage_3(
          this,
          Invocation.getter(#flutterSecureStorage),
        ),
      ) as _i5.FlutterSecureStorage);

  @override
  _i8.Future<_i11.Auth?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i11.Auth?>.value(),
      ) as _i8.Future<_i11.Auth?>);

  @override
  _i8.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> deleteTokens() => (super.noSuchMethod(
        Invocation.method(
          #deleteTokens,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> checkAuth(String? accessToken) => (super.noSuchMethod(
        Invocation.method(
          #checkAuth,
          [accessToken],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [TaskDetailsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDetailsRepository extends _i1.Mock
    implements _i12.TaskDetailsRepository {
  MockTaskDetailsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskServices get taskServices => (super.noSuchMethod(
        Invocation.getter(#taskServices),
        returnValue: _FakeTaskServices_0(
          this,
          Invocation.getter(#taskServices),
        ),
      ) as _i2.TaskServices);

  @override
  _i8.Future<_i6.User> getUserInfo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [id],
        ),
        returnValue: _i8.Future<_i6.User>.value(_FakeUser_4(
          this,
          Invocation.method(
            #getUserInfo,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.User>);
}

/// A class which mocks [InternetCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetCubit extends _i1.Mock implements _i13.InternetCubit {
  MockInternetCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.InternetState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i14.dummyValue<_i13.InternetState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.InternetState);

  @override
  _i8.Stream<_i13.InternetState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i13.InternetState>.empty(),
      ) as _i8.Stream<_i13.InternetState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void emit(_i13.InternetState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i15.Change<_i13.InternetState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
